---
- name: Find server vendor
  block:
    - name: Get status body from Redfish API
      uri:
        url: "https://{{ management_ip }}/redfish/v1"
        method: GET
        headers:
          Content-Type: application/json
          Accept: "application/json"
          OData-Version: "4.0"
        validate_certs: no
        user: "{{ management_user }}"
        password: "{{ management_password }}"
        force_basic_auth: yes
      register: status_body
      no_log: true

    - name: Get vendor from status body
      set_fact:
        vendor: "{{ status_body.json | json_query('Vendor') | lower }}"
      no_log: true
        
    - include_vars: dell-vars.yml
      when: vendor == "dell"
      no_log: true

    - include_vars: hpe-vars.yml
      when: vendor == "hpe"        
      no_log: true

  rescue:
    - name: Printing status body
      debug:
        var: status_body

    - name: Server is unhealthy
      fail:
        msg: "[ERROR] [E0008] Vendor field was not available or not returned a valid value for this configuration. Please check if the management IP refers to a valid server under this project."

- name: Check Health status via API
  block:
    - name: Get general status body
      uri:
        url: "{{ management_url }}"
        method: GET
        headers:
          Content-Type: application/json
          Accept: "application/json"
          OData-Version: "4.0"
        validate_certs: no
        user: "{{ management_user }}"
        password: "{{ management_password }}"
        force_basic_auth: yes
      register: status_body
      no_log: true

    - name: Retrieve health status
      set_fact:
        health_status: "{{ status_body.json | json_query('Status.Health') }}"
      no_log: true

    - name: Fail if status is different from OK
      fail:
        msg: "[FAILURE] Server is unhealthy."
      when: health_status != "OK"
  rescue:
    - name: Printing status body
      debug:
        var: health_status

    - name: Server is unhealthy
      fail:
        msg: "[ERROR] [E0001] Server is unhealthy. Please check if the server is correctly powered and configured to accept further actions."
      when: health_status == "OK"
  delegate_to: 127.0.0.1
  tags:
    - health

- name: Retrieving valid MAC Addresses
  block:
    - name: Retrieve Management MAC Address
      uri:
        url: "https://{{ management_ip }}{{ management_context }}"
        method: GET
        headers:
          Content-Type: application/json
          Accept: "application/json"
          OData-Version: "4.0"
        validate_certs: no
        user: "{{ management_user }}"
        password: "{{ management_password }}"
        force_basic_auth: yes
      register: management_mac_address_output
      delegate_to: 127.0.0.1
      no_log: true

    - set_fact:
        management_mac_address: "{{ management_mac_address_output.json | json_query(management_mac_address_query) }}"
      no_log: true

    - name: Retrieve list of ethernet interfaces
      uri:
        url: "{{ management_url }}/EthernetInterfaces/"
        method: GET
        headers:
          Content-Type: application/json
          Accept: "application/json"
          OData-Version: "4.0"
        validate_certs: no
        user: "{{ management_user }}"
        password: "{{ management_password }}"
        force_basic_auth: yes
      register: ethernet_interfaces
      delegate_to: 127.0.0.1
      no_log: true

    - set_fact:
        ethernet_interfaces_list: "{{ ethernet_interfaces.json | json_query(query) }}"
      vars:
        query: 'Members[*]."@odata.id"'
      no_log: true

    - name: Retrieve information about each ethernet interface
      uri:
        url: "https://{{ management_ip }}{{ item }}"
        method: GET
        headers:
          Content-Type: application/json
          Accept: "application/json"
          OData-Version: "4.0"
        validate_certs: no
        user: "{{ management_user }}"
        password: "{{ management_password }}"
        force_basic_auth: yes
      with_items: "{{ ethernet_interfaces_list }}"
      register: mac_addresses
      delegate_to: 127.0.0.1
      no_log: true

    - set_fact:
        mac_addresses_list: []
      no_log: true

    - set_fact:
        ethernet_id_list: []
      no_log: true

    - set_fact:
        mac_addresses_list: "{{ mac_addresses_list + [  item | json_query(query) ] }}"
      with_items: "{{ mac_addresses.results }}"
      when: linkup in "{{ item | json_query(linkquery) }}"
      vars:
        query: '"json"."MACAddress"'
        linkquery: '"json"."LinkStatus"'
        linkup: "LinkUp"
      no_log: true

    - set_fact:
        ethernet_id_list: "{{ ethernet_id_list + [  item | json_query(query) ] }}"
      with_items: "{{ mac_addresses.results }}"
      when: linkup in "{{ item | json_query(linkquery) }}"
      vars:
        query: '"json"."Id"'
        linkquery: '"json"."LinkStatus"'
        linkup: "LinkUp"
      no_log: true
   
    - set_fact:
        host_network_info: "{{ host_network_info | default([]) + [dict(interface=item[0], mac=item[1])] }}"
      loop: "{{ ethernet_id_list | zip(mac_addresses_list) | list }}"
      no_log: true

    - name: List management server interface
      debug:
        var: management_mac_address

    - name: List active server interfaces with respective MAC Addresses
      debug:
        var: host_network_info
