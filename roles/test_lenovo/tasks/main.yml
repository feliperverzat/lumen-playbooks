- name: Check Health status via API
  block:
    - name: Get general status body
      uri:
        url: https://10.228.4.108/redfish/v1/Systems/1
        method: GET
        headers:
          Content-Type: application/json
        validate_certs: no
        user: USERID
        password: PASSW0RD
        force_basic_auth: yes
      register: status_body

    - name: Retrieve health status
      set_fact:
        health_status: "{{ status_body.json | json_query('Status.Health') }}"

    - name: Fail if status is different from OK
      fail:
        msg: "[FAILURE] Server is unhealthy."
      when: health_status != "OK"
  rescue:
    - name: Printing status body
      debug:
        var: health_status

    - name: Server is unhealthy
      fail:
        msg: "[ERROR] [E0001] Server is unhealthy. Please check if the server is correctly powered and configured to accept further actions."
      when: health_status == "OK"
  delegate_to: 127.0.0.1
  tags:
    - health
    

- name: Configure BIOS options
  block:
    - name: Retrieve list of ethernet interfaces
      uri:
        url: https://10.228.4.108/redfish/v1/Systems/1/EthernetInterfaces/
        method: GET
        headers:
          Content-Type: application/json
        validate_certs: no
        user: USERID
        password: PASSW0RD
        force_basic_auth: yes
      register: ethernet_interfaces
      delegate_to: 127.0.0.1

    - set_fact:
        ethernet_interfaces_list: "{{ ethernet_interfaces.json | json_query(query) }}"
      vars:
        query: 'Members[*]."@odata.id"'

    - name: Retrieve information about each ethernet interface
      uri:
        url: https://10.228.4.108{{ item }}
        method: GET
        headers:
          Content-Type: application/json
        validate_certs: no
        user: USERID
        password: PASSW0RD
        force_basic_auth: yes
      with_items: "{{ ethernet_interfaces_list }}"
      register: mac_addresses
      delegate_to: 127.0.0.1

    - set_fact:
        mac_addresses_list: []

    - set_fact:
        mac_addresses_list: "{{ mac_addresses_list + [  item | json_query(query) ] }}"
      with_items: "{{ mac_addresses.results }}"
      when: linkup in "{{ item | json_query(linkquery) }}"
      vars:
        query: '"json"."MACAddress"'
        linkquery: '"json"."LinkStatus"'
        linkup: "LinkUp"

    - debug:
        msg: "{{ mac_addresses_list }}"
        
 #   - name: Create PXE unique symlink pointing to valid MAC Addresses
 #     shell: "ln -sf rhel7-minimal.ipxe mac-{{ item | replace(':', '') }}.ipxe"
 #     with_items: "{{ mac_addresses_list }}"
 #     args:
 #       chdir:  /var/lib/tftpboot/pxe/ipxe
 #     become: yes
 
 
    - name: Set BootMode to Uefi
      redfish_config:
        category: Systems
        command: SetBiosAttributes
        bios_attribute_name: Q00001_Boot_Mode
        bios_attribute_value: UEFI_only
        baseuri: "10.228.4.108"
        username: USERID
        password: PASSW0RD
      register: bios_attribute
      delegate_to: 127.0.0.1

        
        
    - name: Set one-time boot device to 10.228.4.108
      redfish_command:
        category: Systems
        command: SetOneTimeBoot
        bootdevice: Pxe
        baseuri: "10.228.4.108"
        username: USERID
        password: PASSW0RD
      register: bios_onetimeboot
      delegate_to: 127.0.0.1
      
#- name: Reboot system using API
  #redfish_command:
    #category: Systems
   # command: PowerReboot
  #  baseuri: "10.228.4.108"
 #   username: USERID
#    password: PASSW0RD


- name: Getting power state
  redfish_info:
    category: Systems
    command: GetSystemInventory
    baseuri: 10.228.4.108
    username: USERID
    password: PASSW0RD
    timeout: 20
  register: result
  until: result | json_query('redfish_facts.system.entries[*][*].PowerState') is search("On")
  retries: 20
  delay: 30